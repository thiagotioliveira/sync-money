openapi: 3.0.3
info:
  title: Users API
  version: 1.0.0
  description: Users API

tags:
  - name: Users
    description: Endpoints related to users
  - name: Auth
    description: Endpoints related to authentication
paths:
  /api/auth/register:
    post:
      security: []
      tags:
        - Auth
      summary: Register a new user
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRegisterRequestBody'
      responses:
        '201':
          description: Registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostRegisterResponseBody'
  /api/auth/login:
    post:
      security: []
      tags:
        - Auth
      summary: Login
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostLoginRequestBody'
      responses:
        '200':
          description: Login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostLoginResponseBody'
  /api/users:
    get:
      tags:
        - Users
      summary: Retrieve all users
      operationId: listUsers
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetUsersResponseBody'
  /api/users/me:
    get:
      tags:
        - Users
      summary: Retrieve the current user data
      operationId: getById
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersResponseBody'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/users/invites:
    get:
      tags:
        - Users
      summary: Retrieve all invitations
      operationId: listInvitations
      responses:
        '200':
          description: List of invitations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetInvitationsResponseBody'
    post:
      tags:
        - Users
      summary: Invite user
      operationId: invite
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInviteUserRequestBody'
      responses:
        '201':
          description: Invite created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostInviteUserResponseBody'
components:
  schemas:
    InvitationStatus:
      type: string
      enum: [ PENDING, INVITED ]
    GetInvitationsResponseBody:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        invitedAt:
          type: string
          format: date-time
        invitedBy:
          type: string
          format: uuid
        email:
          type: string
        status:
          $ref: '#/components/schemas/InvitationStatus'
    PostInviteUserRequestBody:
      type: object
      properties:
        email:
          type: string
    PostInviteUserResponseBody:
      type: object
      properties:
        id:
          type: string
          format: uuid
    PostLoginRequestBody:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    PostLoginResponseBody:
      type: object
      properties:
        token:
          type: string
    PostRegisterRequestBody:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        password:
          type: string
    PostRegisterResponseBody:
      type: object
      properties:
        id:
          type: string
          format: uuid
    GetUsersResponseBody:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        name:
          type: string
        createdAt:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
      required:
        - code
        - message
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []